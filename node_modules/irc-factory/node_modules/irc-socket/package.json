{
  "name": "irc-socket",
  "version": "2.1.0",
  "description": "Simple IRC Socket for usage with IRC libraries.",
  "main": "irc-socket.js",
  "scripts": {
    "test": "jasmine-node spec --verbose"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Havvy/irc-socket.git"
  },
  "keywords": [
    "irc",
    "socket"
  ],
  "author": {
    "name": "Ryan S. Scheel",
    "url": "havvy"
  },
  "contributors": [
    {
      "name": "Ricki Hastings",
      "email": "ricki@ircanywhere.com",
      "url": "http://ircanywhere.com"
    },
    {
      "name": "Fionn Kelleher",
      "email": "me@fionn.co",
      "url": "http://fionn.co"
    }
  ],
  "license": "BSD",
  "readme": "Simple IRC Socket - handles communication between an IRC server and consumers.\n\nThe socket is a thin wrapper around a generic socket, \n\n## Installation ##\n\n```\nnpm install irc-socket\n```\n\n## Instantiation ##\n\n```javascript\nvar IrcSocket = require('simple-irc-socket');\nvar myConnection = IrcSocket({\n    server: 'irc.yournet.net',\n    password: 'server-password',\n    nick: 'aBot',\n    user: 'node',\n    realname: 'Node Simple Socket'\n    port: 6667,\n    secure: false,\n    capab: true\n});\n```\n\nIf `capab: true` is passed to the configuration object the library will send `CAP LS` first to initiate a capabilities negotiation.\n\n### Dependency Management ###\n\nA simple irc socket uses a `net.Socket` socket by default. You can pass a\nseperate generic socket instead in the second parameter.\n\nIf you pass `secure: true` in the network configuration object, this parameter is ignored.\n\n## Starting and Closing the Socket ##\n\n```javascript\nvar myConnection = IrcSocket(...);\nmySocket.once('ready', function () {\n    mySocket.end();\n}\nmySocket.connect();\n```\n\n## Writing to the Server ##\nTo send messages to the server, use socket.raw(). It accepts either a\nstring or an array of Strings. When an array is passed, elments containing\nwhitespaces will be interpreted as a trailing parameter, else the element\nwill be left as is. The end result will be joined to a String.\nThe message '''must''' follow the \n[IRC protocol](https://irc-wiki.org/RFC 1459).\n\n```javascript\nvar details = {...};\nvar myConnection = Ircsocket(details);\n\nmySocket.connect();\nmySocket.once('ready', function () {\n    // Using a string.\n    mySocket.raw(\"JOIN #biscuits\");\n}\n\nmySocket.on('data', function (message) {\n    message = message.split(\" \");\n\n    // Numeric 333 is sent when a user joins a channel.\n    if (message[1] === \"333\" &&\n        message[2] === details.nick &&\n        message[3] === \"#biscuits\")\n    {\n        // Using an array instead of a string.\n        mySocket.raw([\"PRIVMSG\", \"#biscuits\", \":Hello world.\"])\n    }\n});\n\nmySocket.on('data', function (message) {\n    // This is sent when you do /quit too.\n    if (message.slice(0, 5) === \"ERROR\") {\n        mySocket.end();\n    }\n})\n```\n\nThe raw method does not allow the usage of newline characters. This is\nmostly a security concern, so that if the user of the Socket doesn't\nvalidate input, an evil user can't send a command causing the bot to quit:\n\n```\n<eviluser>!say SUCKAS \\nQUIT :Mua ha ha\n```\n\n## Reading from the Server ##\n\nYou do not need to handle PING messages. They are filtered from the messages\nemitted by the socket.\n\nAll other messages are emitted via a 'data' event. Receiving callbacks to this\nevent will receive the message as the first parameter.\n\nExamples of reading messages are in the previous example. Messages generally\nlook like the following:\n\n```\n:irc.uk.mibbit.net 376 Havvy :End of /MOTD command.\n:NyanCat!Mibbit@mib-FFFFFFFF.redacted.com QUIT :Quit: http://www.mibbit.com ajax IRC Client\nERROR :Closing Link: Havvy[127-00-00-00.redacted.com] (Quit: I got the messages I want.)\n```\n\n## Utility Methods ##\n\n### isConnected() ###\n\nThis method will return true when the socket is started, but not ended. It\nwill otherwise return false.\n\n### getRealname() ###\n\nThis method returns the realname (also called gecos) of the connection.\n\n### setTimeout(timeout, [callback]) ###\n\nAs per the implementation socket. See\n[Node documentation](http://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback)\nfor details.\n\n## Events ##\n\nThe basic-irc-socket is an event emitter. It emits five events.\n\n+ ready(): Once the first 001 message has been acknowledged.\n+ data(message: String): Every message (including the 001) from the\nsender (inclusive) the the newline (exclusive).\n+ close(): Once the implementing socket has been closed.\n+ timeout(): When the implementing socket times out.\n+ end(): Once the implementing socket emits an 'end' event.\n\n## Testing ##\n\nInstall jasmine-node globally, and then test via npm.\n\n```\nnpm install -g jasmine-node\nnpm test\n```\n\n## Known Issues ##\n\nThe socket you pass gets ignored if you pass `secure: true` in the network config.\n\n## See Also\n\nThe [irc-message](https://github.com/expr/irc-message) module will quickly parse the strings you pass into objects.\n\nFor a full IRC framework, take a look at [Tennu](https://github.com/havvy/tennu).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Havvy/irc-socket/issues"
  },
  "_id": "irc-socket@2.1.0",
  "_from": "irc-socket@2.1.0"
}
